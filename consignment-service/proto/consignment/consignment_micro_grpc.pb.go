// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// protoc-gen-go-micro version: v3.10.4
// source: consignment.proto

package consignment

import (
	context "context"
	client "go.unistack.org/micro/v3/client"
	server "go.unistack.org/micro/v3/server"
)

type shippingServiceClient struct {
	c    client.Client
	name string
}

func NewShippingServiceClient(name string, c client.Client) ShippingServiceClient {
	return &shippingServiceClient{c: c, name: name}
}

func (c *shippingServiceClient) CreateConsignment(ctx context.Context, req *Consignment, opts ...client.CallOption) (*Response, error) {
	rsp := &Response{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "ShippingService.CreateConsignment", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *shippingServiceClient) GetConsignments(ctx context.Context, req *GetRequest, opts ...client.CallOption) (*Response, error) {
	rsp := &Response{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "ShippingService.GetConsignments", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

type shippingServiceServer struct {
	ShippingServiceServer
}

func (h *shippingServiceServer) CreateConsignment(ctx context.Context, req *Consignment, rsp *Response) error {
	return h.ShippingServiceServer.CreateConsignment(ctx, req, rsp)
}

func (h *shippingServiceServer) GetConsignments(ctx context.Context, req *GetRequest, rsp *Response) error {
	return h.ShippingServiceServer.GetConsignments(ctx, req, rsp)
}

func RegisterShippingServiceServer(s server.Server, sh ShippingServiceServer, opts ...server.HandlerOption) error {
	type shippingService interface {
		CreateConsignment(ctx context.Context, req *Consignment, rsp *Response) error
		GetConsignments(ctx context.Context, req *GetRequest, rsp *Response) error
	}
	type ShippingService struct {
		shippingService
	}
	h := &shippingServiceServer{sh}
	var nopts []server.HandlerOption
	return s.Handle(s.NewHandler(&ShippingService{h}, append(nopts, opts...)...))
}
