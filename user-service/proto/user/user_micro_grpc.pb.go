// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// protoc-gen-go-micro version: v3.10.4
// source: user.proto

package user

import (
	context "context"
	client "go.unistack.org/micro/v3/client"
	server "go.unistack.org/micro/v3/server"
)

type userServiceClient struct {
	c    client.Client
	name string
}

func NewUserServiceClient(name string, c client.Client) UserServiceClient {
	return &userServiceClient{c: c, name: name}
}

func (c *userServiceClient) Create(ctx context.Context, req *User, opts ...client.CallOption) (*Response, error) {
	rsp := &Response{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "UserService.Create", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *userServiceClient) Get(ctx context.Context, req *User, opts ...client.CallOption) (*Response, error) {
	rsp := &Response{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "UserService.Get", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *userServiceClient) GetAll(ctx context.Context, req *Request, opts ...client.CallOption) (*Response, error) {
	rsp := &Response{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "UserService.GetAll", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *userServiceClient) Auth(ctx context.Context, req *User, opts ...client.CallOption) (*Token, error) {
	rsp := &Token{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "UserService.Auth", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *userServiceClient) ValidateToken(ctx context.Context, req *Token, opts ...client.CallOption) (*Token, error) {
	rsp := &Token{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "UserService.ValidateToken", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

type userServiceServer struct {
	UserServiceServer
}

func (h *userServiceServer) Create(ctx context.Context, req *User, rsp *Response) error {
	return h.UserServiceServer.Create(ctx, req, rsp)
}

func (h *userServiceServer) Get(ctx context.Context, req *User, rsp *Response) error {
	return h.UserServiceServer.Get(ctx, req, rsp)
}

func (h *userServiceServer) GetAll(ctx context.Context, req *Request, rsp *Response) error {
	return h.UserServiceServer.GetAll(ctx, req, rsp)
}

func (h *userServiceServer) Auth(ctx context.Context, req *User, rsp *Token) error {
	return h.UserServiceServer.Auth(ctx, req, rsp)
}

func (h *userServiceServer) ValidateToken(ctx context.Context, req *Token, rsp *Token) error {
	return h.UserServiceServer.ValidateToken(ctx, req, rsp)
}

func RegisterUserServiceServer(s server.Server, sh UserServiceServer, opts ...server.HandlerOption) error {
	type userService interface {
		Create(ctx context.Context, req *User, rsp *Response) error
		Get(ctx context.Context, req *User, rsp *Response) error
		GetAll(ctx context.Context, req *Request, rsp *Response) error
		Auth(ctx context.Context, req *User, rsp *Token) error
		ValidateToken(ctx context.Context, req *Token, rsp *Token) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceServer{sh}
	var nopts []server.HandlerOption
	return s.Handle(s.NewHandler(&UserService{h}, append(nopts, opts...)...))
}
