// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// protoc-gen-go-micro version: v3.10.4
// source: vessel.proto

package vessel

import (
	context "context"
	client "go.unistack.org/micro/v3/client"
	server "go.unistack.org/micro/v3/server"
)

type vesselServiceClient struct {
	c    client.Client
	name string
}

func NewVesselServiceClient(name string, c client.Client) VesselServiceClient {
	return &vesselServiceClient{c: c, name: name}
}

func (c *vesselServiceClient) FindAvailable(ctx context.Context, req *Specification, opts ...client.CallOption) (*Response, error) {
	rsp := &Response{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "VesselService.FindAvailable", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *vesselServiceClient) Create(ctx context.Context, req *Vessel, opts ...client.CallOption) (*Response, error) {
	rsp := &Response{}
	err := c.c.Call(ctx, c.c.NewRequest(c.name, "VesselService.Create", req), rsp, opts...)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

type vesselServiceServer struct {
	VesselServiceServer
}

func (h *vesselServiceServer) FindAvailable(ctx context.Context, req *Specification, rsp *Response) error {
	return h.VesselServiceServer.FindAvailable(ctx, req, rsp)
}

func (h *vesselServiceServer) Create(ctx context.Context, req *Vessel, rsp *Response) error {
	return h.VesselServiceServer.Create(ctx, req, rsp)
}

func RegisterVesselServiceServer(s server.Server, sh VesselServiceServer, opts ...server.HandlerOption) error {
	type vesselService interface {
		FindAvailable(ctx context.Context, req *Specification, rsp *Response) error
		Create(ctx context.Context, req *Vessel, rsp *Response) error
	}
	type VesselService struct {
		vesselService
	}
	h := &vesselServiceServer{sh}
	var nopts []server.HandlerOption
	return s.Handle(s.NewHandler(&VesselService{h}, append(nopts, opts...)...))
}
